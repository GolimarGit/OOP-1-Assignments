package comp248.concordia;

/* -------------------------------------------------------
   Assignment 4
   Written by: Laurenz Marius Gomez 40247966
   For COMP 248 Section T â€“ Fall 2022
   -------------------------------------------------------- */

import java.util.Scanner;

/**
 * @programDescription This HouseholdBudget application simulates the organization of one's budget for daily expenses and aims to better optimize monetary spending.
 */
public class BudgetDemo {

    public static void main(String[] args) {
        //Create a HouseholdBudget array to hold the 5 HouseholdBudget objects.
        HouseholdBudget[] hbs = new HouseholdBudget[5];

        //Create 5 HouseholdBudget objects following the Assignment instructions.
        Fund fund1 = new Fund(0, 1, 0, 2, 1);

        hbs[0] = new HouseholdBudget(
                fund1,
                new Expense[] {
                        new Expense("Purchase", 85.5, "IGA", 11, 25),
                        new Expense("Bill", 122.75, "Videotron", 12, 2)
                }
        );

        hbs[1] = new HouseholdBudget(
                fund1,
                new Expense[] {
                        new Expense("Purchase", 85.5, "IGA", 11, 25),
                        new Expense("Bill", 16.2, "Costco", 11, 23)
                }
        );

        hbs[2] = new HouseholdBudget(
                new Fund(2, 0, 2, 1, 1),
                new Expense[] {
                        new Expense("Purchase", 50.75, "Pharmaprix", 12, 1),
                        new Expense("Purchase", 16.2, "TheBay", 12, 16),
                        new Expense("Bill", 65.85, "Fido", 1, 5)
                }
        );

        Fund fund2 = new Fund(2, 1, 2, 1, 5);

        hbs[3] = new HouseholdBudget(
                fund2,
                new Expense[] { }
        );

        hbs[4] = new HouseholdBudget(
                fund2,
                new Expense[] { }
        );

        Scanner sc = new Scanner(System.in); //Initialize Scanner object.

        //Print out a welcome message.
        System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
                + "\nWelcome to COMP248 Geek's HouseholdBudget_2022 Application\n"
                + "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

        boolean resume = true; //Initialize the looping condition for the Application.
        while(resume) {
            //Print out the available choices and prompt the user to input their choice.
            System.out.print("What would you like to do?"
                    + "\n  1. See the possessions of all householdBudgets"
                    + "\n  2. See the possessions of one householdBudget"
                    + "\n  3. List householdBudgets with same total amount of fund"
                    + "\n  4. List householdBudgets with same fund denomination(s)"
                    + "\n  5. List householdBudgets with same total amount of fund and same number of expenses"
                    + "\n  6. Add an expense to an existing householdBudget"
                    + "\n  7. Remove an existing expense from a householdBudget"
                    + "\n  8. Update the payment due date of an existing expense"
                    + "\n  9. Add fund to a householdBudget"
                    + "\n  0. To quit"
                    + "\n\nPlease enter your choice and press <Enter>:");

            int choice = sc.nextInt(); //Store user input in an int variable.
            switch(choice) {
                /** See the possessions of all HouseholdBudget objects */
                case 1:
                    System.out.println("Content of each HouseholdBudget:\n---------------------");
                    //Loop through the array of HouseholdBudget objects then call the objects' toString method.
                    for(int i = 0; i < hbs.length; i++) {
                        System.out.println("HouseholdBudget #" + i + ":\n" + hbs[i].toString());
                    }
                    System.out.println();
                    break;

                /** See the possessions of one HouseholdBudget object */
                case 2:
                    //Prompt the user to enter the desired HouseholdBudget object.
                    System.out.print("Which HouseholdBudget you want to see the possessions of? (Enter number 0 to 4): ");
                    int hbIndex = sc.nextInt(); //Store the user input in an int variable.
                    boolean searchingHB = true; //Initialize the looping condition for the HouseholdBudget search.
                    while(searchingHB) {
                        if(hbIndex < 0 || hbIndex > 4) { //Failsafe for entering an invalid HouseholdBudget index
                            //Prompt the user to re-enter a HouseholdBudget object index.
                            System.out.print("Sorry but there is no HouseholdBudget number " + hbIndex
                                    + "\n--> Try again: (Enter number 0 to 4): ");
                            hbIndex = sc.nextInt(); //Store the user input in an int variable.
                        }
                        else {
                            //Print out the HouseholdBudget object's possessions.
                            System.out.println(hbs[hbIndex].toString() + "\n");
                            searchingHB = false; //Negate the looping condition for the HouseholdBudget search.
                        }
                    }
                    break;

                /** List HouseholdBudget objects with the same total amount of funds */
                case 3:
                    System.out.println("List of HouseholdBudgets with same total fund:\n");
                    for(int i = 0; i < hbs.length; i++) { //Loop through the array of HouseholdBudget objects.
                        for(int j = i+1; j < hbs.length; j++) {
                            //Compare the current HouseholdBudget object with the following object.
                            if(hbs[i].equalFundTotal(hbs[j])) {
                                System.out.println("\t\tHouseholdBudgets " + i + " and " + j + " both have " + hbs[i].totalFunds());
                            }
                        }
                    }
                    System.out.println("\n");
                    break;

                /** List HouseholdBudget objects with the same fund denomination */
                case 4:
                    System.out.println("List of HouseholdBudgets with same Fund:\n");
                    for(int i = 0; i < hbs.length; i++) { //Loop through the array of HouseholdBudget objects.
                        for(int j = i+1; j < hbs.length; j++) {
                            //Compare the current HouseholdBudget object with the following object.
                            if(hbs[i].equalFundAmount(hbs[j])) {
                                System.out.println("\t\tHouseholdBudgets " + i + " and " + j + " both have " + hbs[i].fundBreakdown());
                            }
                        }
                    }
                    System.out.println("\n");
                    break;

                /** List HouseholdBudget objects with the same total amount of funds and the same number of expenses */
                case 5:
                    System.out.println("List of HouseholdBudgets with sane amount of money and same number of expenses :\n");
                    for(int i = 0; i < hbs.length; i++) { //Loop through the array of HouseholdBudget objects.
                        for(int j = i+1; j < hbs.length; j++) {
                            //Compare the current HouseholdBudget object with the following object.
                            if(hbs[i].equals(hbs[j])) {
                                System.out.println("\t\tHouseholdBudgets " + i + " and " + j);
                            }
                        }
                    }
                    System.out.println("\n");
                    break;

                /** Add an Expense object to the array of Expense objects of a HouseholdBudget object */
                case 6:
                    //Prompt the user to enter the desired HouseholdBudget object.
                    System.out.print("Which HouseholdBudget to you want to add an Expense to? (Enter number 0 to 4): ");
                    hbIndex = sc.nextInt(); //Store the user input in an int variable.
                    searchingHB = true; //Initialize the looping condition for the HouseholdBudget search.
                    while(searchingHB) {
                        if(hbIndex < 0 || hbIndex > 4) { //Failsafe for entering an invalid HouseholdBudget index
                            //Prompt the user to re-enter a HouseholdBudget object index.
                            System.out.print("Sorry but there is no HouseholdBudget number " + hbIndex
                                    + "\n--> Try again: (Enter number 0 to 4): ");
                            hbIndex = sc.nextInt(); //Store the user input in an int variable.
                        }
                        else {
                            //Prompt the user to enter the details of the Expense object.
                            System.out.print("Please enter the following information so that we may complete the expense-"
                                    + "\n --> Type of expense (Bill, Purchase, etc ..): ");
                            sc.nextLine(); //Create an empty Scanner input to "reset" the Scanner object.
                            String type = sc.nextLine(); //Store the type of the Expense object in a String variable.

                            System.out.print(" --> Amount of the expense: ");
                            double amount = sc.nextDouble(); //Store the amount of the Expense object in a double variable.

                            System.out.print(" --> Name of the business: ");
                            sc.nextLine(); //Create an empty Scanner input to "reset" the Scanner object.
                            String name = sc.nextLine(); //Store the name of the business in a String variable.

                            System.out.print(" --> Payment due day number and month (seperate by a space): ");
                            int day = sc.nextInt(); //Store the dueDay of the Expense object in an int variable.
                            int month = sc.nextInt(); //Store the dueMonth of the Expense object in an int variable.

                            //Initialize an Expense object and add it to the array of Expense objects.
                            hbs[hbIndex].addExpense(new Expense(type, amount, name, month, day));
                            searchingHB = false; //Negate the looping condition for the HouseholdBudget search.
                        }
                    }
                    break;

                /** Remove an Expense object from the array of Expense objects of a HouseholdBudget object */
                case 7:
                    //Prompt the user to enter the desired HouseholdBudget object.
                    System.out.print("Which HouseholdBudget to you want to remove an expense from? (Enter number 0 to 4): ");
                    hbIndex = sc.nextInt(); //Store the user input in an int variable.
                    searchingHB = true; //Initialize the looping condition for the HouseholdBudget search.
                    while(searchingHB) {
                        if(hbIndex < 0 || hbIndex > 4) { //Failsafe for entering an invalid HouseholdBudget index
                            //Prompt the user to re-enter a HouseholdBudget object index.
                            System.out.print("Sorry but there is no HouseholdBudget number " + hbIndex
                                    + "\n--> Try again: (Enter number 0 to 4): ");
                            hbIndex = sc.nextInt(); //Store the user input in an int variable.
                        }
                        //Failsafe for entering a HouseholdBudget index with no Expense objects
                        else if(hbs[hbIndex].nbOfExpenses() == 0) {
                                System.out.println("Sorry that HouseholdBudget has no expenses\n");
                        }
                        else {
                            //Prompt the user to enter the undesired Expense object.
                            System.out.println("(Enter number 0 to " + (hbs[hbIndex].nbOfExpenses()-1) + ")");
                            int expIndex = sc.nextInt(); //Store the user input in an int variable.
                            boolean searchingExp = true; //Initialize the looping condition for the Expense object search.
                            while(searchingExp) {
                                //Failsafe for entering an invalid Expense object index
                                if(expIndex < 0 || expIndex > hbs[hbIndex].nbOfExpenses()-1) {
                                    //Prompt the user to re-enter an Expense object index.
                                    System.out.println("Sorry but there is no expense number " + expIndex
                                            + "\n--> Try again:\n(Enter number 0 to " + (hbs[hbIndex].nbOfExpenses()-1) + "):");
                                    expIndex = sc.nextInt(); //Store the user input in an int variable.
                                }
                                else {
                                    hbs[hbIndex].removeExpense(expIndex); //Remove the undesired Expense object from the array.
                                    searchingExp = false; //Negate the looping condition for the Expense object search.
                                }
                            }
                        }
                        searchingHB = false; //Negate the looping condition for the HouseholdBudget search.
                    }
                    System.out.println();
                    break;

                /** Update the due date of a HouseholdBudget object's Expense object */
                case 8:
                    //Prompt the user to enter the desired HouseholdBudget object.
                    System.out.print("Which HouseholdBudget do you want to update an expense form? (Enter number 0 to 4): ");
                    hbIndex = sc.nextInt(); //Store the user input in an int variable.
                    searchingHB = true; //Initialize the looping condition for the HouseholdBudget search.
                    while(searchingHB) {
                        if(hbIndex < 0 || hbIndex > 4) { //Failsafe for entering an invalid HouseholdBudget index
                            //Prompt the user to re-enter a HouseholdBudget object index.
                            System.out.print("Sorry but there is no HouseholdBudget number " + hbIndex
                                    + "\n--> Try again: (Enter number 0 to 4): ");
                            hbIndex = sc.nextInt(); //Store the user input in an int variable.
                        }
                        //Failsafe for entering a HouseholdBudget index with no Expense objects
                        else if(hbs[hbIndex].nbOfExpenses() == 0) {
                            System.out.println("Sorry that HouseholdBudget has no expenses\n");
                        }
                        else {
                            //Prompt the user to enter the desired Expense object.
                            System.out.println("Which expense do you want to update? (Enter number 0 to " + (hbs[hbIndex].nbOfExpenses()-1) + "):");
                            int expIndex = sc.nextInt(); //Store the user input an int variable.
                            boolean searchingExp = true; //Initialize the looping condition for the Expense object search.
                            while(searchingExp) {
                                //Failsafe for entering an invalid Expense object index
                                if(expIndex < 0 || expIndex > hbs[hbIndex].nbOfExpenses()-1) {
                                    //Prompt the user to re-enter an Expense object index.
                                    System.out.println("Sorry but there is no expense number " + expIndex
                                            + "\n--> Try again:\n(Enter number 0 to " + (hbs[hbIndex].nbOfExpenses()-1) + "):");
                                    expIndex = sc.nextInt(); //Store the user input in an int variable.
                                }
                                else {
                                    //Prompt the user to enter the new dueDay and dueMonth of the Expense object.
                                    System.out.print(" --> Enter new payment due day number and month (seperate by a space): ");
                                    int newDay = sc.nextInt(); //Store the first user input in an int variable.
                                    int newMonth = sc.nextInt(); //Store the second user input in an int variable.
                                    //Update the due date of the Expense object.
                                    hbs[hbIndex].updateDueDate(expIndex, newDay, newMonth);
                                    searchingExp = false; //Negate the looping condition for the Expense object search.
                                }
                            }
                        }
                        searchingHB = false; //Negate the looping condition for the HouseholdBudget object search.
                    }
                    System.out.println();
                    break;

                /** Add a Fund object to a HouseholdBudget object */
                case 9:
                    //Prompt the user to enter the desired HouseholdBudget object.
                    System.out.print("Which HouseholdBudget do you want to add Fund to? (Enter number 0 to 4): ");
                    hbIndex = sc.nextInt(); //Store the user input in an int variable.
                    searchingHB = true; //Initialize the looping condition for the HouseholdBudget object search.
                    while(searchingHB) {
                        if(hbIndex < 0 || hbIndex > 4) { //Failsafe for entering an invalid HouseholdBudget index
                            //Prompt the user to re-enter a HouseholdBudget object index.
                            System.out.print("Sorry but there is no HouseholdBudget number " + hbIndex
                                    + "\n--> Try again: (Enter number 0 to 4): ");
                            hbIndex = sc.nextInt(); //Store the user input in an int variable.
                        }
                        else {
                            //Prompt the user to enter the amount of currency types to add.
                            System.out.print("How many loonies, toonies,$5,$10 and $20 bill do you want to add?"
                                    + "\nEnter 5 numbers seperated by a space): ");
                            //Store the user inputs in int variables.
                            int newLoonies = sc.nextInt();
                            int newToonies = sc.nextInt();
                            int newFiveDollars = sc.nextInt();
                            int newTenDollars = sc.nextInt();
                            int newTwentyDollars = sc.nextInt();

                            //Add the new amounts of currency types to the Fund object.
                            hbs[hbIndex].addFunds(newLoonies, newToonies, newFiveDollars, newTenDollars, newTwentyDollars);
                            searchingHB = false; //Negate the looping condition for the HouseholdBudget object search.
                        }
                    }
                    System.out.println();
                    break;

                /** Exiting the Application */
                case 0:
                    //Print out a closing message.
                    System.out.print("Thank you for using COMP248 Geek's HouseholdBudget application!");
                    resume = false; //Negate the looping condition for the Application.
                    break;

                /** Case for an invalid use input */
                default:
                    //Prompt the user to enter a valid command.
                    System.out.println("Sorry that is not a valid choice. Try again.\n\n");
            }
        }
        sc.close(); //Close the Scanner object to prevent memory leak.
    }
}
