package comp248.concordia;

/* -------------------------------------------------------
   Assignment 3
   Written by: Laurenz Marius Gomez 40247966
   For COMP 248 Section T – Fall 2022
   -------------------------------------------------------- */

import java.util.Scanner;

public class A3_Q2 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Welcome to the Simple Electronic Voting System (SEVS):"
                + "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
                + "\nPlease Enter a String collection of electoral candidates below:");
        String firstCandidates = sc.nextLine().toUpperCase();
        String[] fCArray = firstCandidates.split(",|;");
        String[] names = new String[fCArray.length/2];
        String[] ids = new String[fCArray.length/2];

        //Create a votes array to store the votes for the different candidates through their respective ID number
        int[] votes = new int[ids.length];

        //Add all even-numbered elements of the inputArray (ID numbers only) to the ID array
        int j = 0;
        for(int i = 0; j < fCArray.length; i++) {
            ids[i] = fCArray[j];
            j += 2;
        }
        //Add all odd-numbered elements of the inputArray (names only) to the namesArray
        int k = 1;
        for(int i = 0; k < fCArray.length; i++) {
            names[i] = fCArray[k];
            k += 2;
        }

        boolean resume = true;
        System.out.print("********************************" + "\n| Code >> Description\t\t   |"
                + "\n********************************\n|  1   >> Display Candidates   |"
                + "\n|  2   >> Vote a new candidate |\n|  3   >> Add new candidate(s) |"
                + "\n|  4   >> Display results\t   |\n|  0   >> End SEVS\t\t\t   |\n********************************"
                + "\n\nEnter a code, from the aforementioned, that corresponds to your task: ");
        String reEnter = "Kindly continue by entering a valid code, from the aforementioned, that corresponds to your task: ";

        do {
            String code = sc.nextLine();
            switch (code) {
                case "1":
                    String c1format = "| %-2s >> %-30s |";
                    System.out.println("****************************************"
                            + "\n| ID >> Candidate's Name               |\n****************************************");
                    for(int i = 0; i < ids.length; i++) {
                        System.out.println(String.format(c1format, ids[i].trim(), names[i].trim()));
                    }
                    System.out.print("****************************************\n\n" + reEnter);
                    break;

                case "2":
                    System.out.print("\nPlease enter the ID of the candidates you with to vote for: ");
                    String wantedId = sc.next();
                    int pos = 0; //Declare int variable pos for referencing corresponding elements in all 3 arrays
                    //Iterate through ids to find the position in which the desired ID is stored in the array
                    for(int i = 0; i < ids.length; i++) {
                        if(ids[i].equals(wantedId)) { //!!!votes keep going to the first element!!!
                            pos = i; //assign the index to the reference position
                        }
                    }
                    System.out.println("pos is " + pos);
                    votes[pos] += 1; //Adding a vote to the corresponding votes element
                    System.out.println("kiettttt t'as voté pour " + ids[pos] + names[pos]);

                    /**
                     * Sorting all 3 arrays
                     */
//                    int m = 0;
//                    String tempName;
//                    for(int i = 1; i < votes.length; i++) {
//                        //Sorting the votes array
//                        if(votes[m] < votes[i]) {
//                            int tempVote = votes[m]; //store current value in temporary variable
//                            votes[m] = votes[i]; //current value now becomes the next value (larger value)
//                            votes[i] = tempVote; //next value swaps with previous value (smaller value)
//                        }
//                        m++;
//                    }
                    //Sorting the votes array
                    int newPos; //Declare int variable newPos for referencing the new position of the ID in the array
                    for(int i = 0; i < votes.length-1; i++) {
                        while(votes[i] < votes[i+1]) {
                            int tempVote = votes[i]; //store current value in temporary variable
                            votes[i] = votes[i+1]; //current value now becomes the next value (larger value)
                            votes[i+1] = tempVote; //next value swaps with previous value (smaller value)
                            newPos = i;
                        }
                    }
                    String tempId = ids[pos]; //Store the recently voted for ID number in a temporary variable

                    break;

                case "3":
                    //Prompt user to enter a String
                    System.out.println("\nPlease enter a String collection of the NEW electoral candidates below:");
                    String newCandidates = sc.nextLine().toUpperCase();
                    String[] nCArray = newCandidates.split(",|;");

                    //Create arrays for the new IDs, names and votes
                    String[] newIds = new String[nCArray.length/2];
                    String[] newNames = new String[nCArray.length/2];
                    int[] newVotes = new int[newIds.length];

                    //Copy old arrays
                    String[] tempIds = ids.clone();
                    String[] tempNames = names.clone();
                    int[] tempVotes = votes.clone();

                    //Add all even-numbered elements of the nCArray (ID number only) to the newIds array
                    int b = 0;
                    for(int a = 0; b < nCArray.length; a++) {
                        newIds[a] = nCArray[b];
                        b += 2;
                    }
                    //Add elements of both arrays into a single array
                    ids = new String[tempIds.length + newIds.length];
                    //Adding the old elements
                    for(int i = 0; i < tempIds.length; i++) {
                        ids[i] = tempIds[i];
                    }
                    //Adding the new elements
                    for(int i = 0; i < newIds.length; i++) {
                        ids[tempIds.length+i] = newIds[i];
                    }
                    //At this point, both old and new IDs are all in one array (ids)

                    //Add all odd-numbered elements of the nCArray (names only) to the newNames array.
                    int c = 1;
                    for(int a = 0; c < nCArray.length; a++) {
                        newNames[a] = nCArray[c];
                        c += 2;
                    }
                    //Add elements of both arrays into a single array
                    names = new String[tempNames.length + newNames.length];
                    //Adding the old names
                    for(int i = 0; i < tempNames.length; i++) {
                        names[i] = tempNames[i];
                    }
                    //Adding the new names
                    for(int i = 0; i < newNames.length; i++) {
                        names[tempNames.length+i] = newNames[i];
                    }
                    //At this point, both old and new names are all in one array (names)

                    //Add elements of both arrays into a single array
                    //Adding old votes
                    for(int i = 0; i < tempVotes.length; i++) {
                        votes[i] = tempVotes[i];
                    }
                    //Adding new votes
                    for(int i = 0; i < newVotes.length; i++) {
                        votes[tempVotes.length+i] = newVotes[i];
                    }
                    //At this point, both old and new votes are in one array (votes)

                    System.out.print("Successfully added a NEW set of electoral candidates to the Simple Electronic "
                            + "Voting System (SEVS).\n\n" + reEnter);
                    break;

                case "4":
                    String c4format = "| %8s | %13s | %2s | %-30s |";
                    System.out.println("******************************************************************"
                            + "\n| Position | Votes/Ballots | ID | Candidate's Name\t\t\t\t |"
                            + "\n******************************************************************");
                    //Display pertinent information
                    int n = 1;
                    for(int i = 0; i < votes.length; i++) {
                        if(i != 0 && votes[i] != votes[i-1]) { //what if i exceeds the length of votes
                            n++;
                        }
                        System.out.println(String.format(c4format, n, votes[i], ids[i].trim(), names[i].trim()));
                    }
                    System.out.print("******************************************************************\n\n" + reEnter);
                    break;

                case "0":
                    System.out.print("\nThank you for using our Simple Electronic Voting System (SEVS).");
                    resume = false;
                    break;

                default:
                    System.out.print("\n" + reEnter);
            }
        }
        while(resume);
        sc.close();
    }
}
